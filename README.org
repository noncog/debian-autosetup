#+HTML: <h1 align="center">debian-autosetup</h1>
#+HTML: <p align="center"><img src="debian-auto-setup.png"/></p>
A simple bash script (compatible with [[https://www.debian.org/][Debian]]-based distributions) to install software and configure your dotfiles after a fresh install.

This script is capable of installing:
- Debian sources
- Apt packages
- Flatpak/Flathub packages
- Directories
- Fonts
- Git Repositories
- GTK themes
- Chemacs2
- i3-gaps, using maestrogerardo's [[https://github.com/maestrogerardo/i3-gaps-deb][script]]
- Dotfiles managed with git --bare repositories ... see dotfiles section for more info
- Apps or settings that require a restart

Tested on:
- Debian 11

* Usage
** Prerequisites
On a minimal install system you will need to do the following before cloning this repository and using it:
#+BEGIN_SRC sh :tangle no
su -
apt install sudo
sudo adduser <username> sudo
reboot
sudo apt install git
#+END_SRC
** Cloning and Using
#+BEGIN_SRC :tangle no
git clone https://github.com/noncog/debian-autosetup
cd debian-autosetup
./install.sh
#+END_SRC

** Customization
By default, the script is setup to my configuration but is modular and easily customizable.

- Just modify the lists with your requirements and they will be installed.
- If you want to disable sections (e.g., Flatpak/Flathub), comment out or remove it's install function call from the Main Installer section (i.e., install_flatpak_packages).
- Some actions like additional processing of Git repositories after download may require custom scripting.

Additionally, you can fork this repository, to make customizations, clone, and version control your own repository!

* About
The install.sh bash script is created from this README.org file using Emacs org-mode literate programming.

That means:
- The README is the shell script.
- Each section documents part of the shell script.
- You can use this README to learn how the script functions, to customize it, or build your own.
* Sources
** Debian Sources
#+BEGIN_SRC sh :tangle install.sh :shebang "#!/bin/bash"
debian_sources=(
    contrib
    non-free
)
#+END_SRC

** Apt Packages
#+BEGIN_SRC sh :tangle install.sh
apt_package_list=(
    # gui
    xorg
    i3-wm
    dunst
    rofi
    polybar
    picom
    nitrogen
    lxappearance
    # utilities/tools
    pulseaudio
    network-manager
    network-manager-gnome
    kitty
    unzip
    scrot
    obs-studio
    ffmpeg
    neofetch
    ssh
    borgbackup
    ripgrep
    # editors
    emacs
    vim
    # programs
    firefox-esr
    anki
    # files and media
    ranger
    sxiv
    vlc
    gimp
    # other
    flatpak
    # drivers
    firmware-iwlwifi
    linux-headers-amd64
    nvidia-driver
    firmware-misc-nonfree
)
#+END_SRC

** Flatpak/Flathub Packages
#+BEGIN_SRC sh :tangle install.sh
flatpak_package_list=(
    # discord
    com.discordapp.Discord
    # spotify
    com.spotify.Client
)
#+END_SRC

** Directories
#+BEGIN_SRC sh :tangle install.sh
directory_list=(
    $HOME/books
    $HOME/documents
    $HOME/downloads
    $HOME/pictures
    $HOME/pictures/archive
    $HOME/projects
    $HOME/videos
)
#+END_SRC

** Font Sources
#+BEGIN_SRC sh :tangle install.sh
font_sources=(
    # Fira Code
    https://github.com/tonsky/FiraCode/releases/download/6.2/Fira_Code_v6.2.zip
    # Font Awesome 5
    https://github.com/FortAwesome/Font-Awesome/releases/download/5.15.4/fontawesome-free-5.15.4-desktop.zip
)
#+END_SRC

** Git Sources
I use git to source my theme and i3-gaps for debian. The installer can clone any repo into ~/downloads. It is up to you to process the downloaded content yourself.
#+BEGIN_SRC sh :tangle install.sh
git_sources=(
    # gtk - dracula theme - other theming done in configs themselves
    https://github.com/dracula/gtk
    # i3-gaps debian
    https://github.com/maestrogerardo/i3-gaps-deb
)
#+END_SRC

* Install Functions
** Debian Sources
#+BEGIN_SRC sh :tangle install.sh
install_debian_sources() {
    # preprocess the user source list
    appended_sources=${debian_sources[@]}
    # add to source list and update
    sudo sed -i "/^deb/ s/$/ $appended_sources/" /etc/apt/sources.list
    sudo apt update
}
#+END_SRC

** Apt Packages
#+BEGIN_SRC sh :tangle install.sh
install_apt_packages() {
    for package in "${apt_package_list[@]}"; do
        sudo apt install -y $package
    done
}
#+END_SRC

** Flatpak/Flathub Packages
#+BEGIN_SRC sh :tangle install.sh
install_flatpak_packages() {
    for package in "${flatpak_package_list[@]}"; do
        sudo flatpak install -y flathub $package
    done
}
#+END_SRC

** Directories
#+BEGIN_SRC sh :tangle install.sh
install_directories() {
    for directory in "${directory_list[@]}"; do
        mkdir -p $directory
    done
}
#+END_SRC

** Fonts
Note: If your fonts won't work, (they should) then their permissions may need modified. Use chmod 644 on them.
#+BEGIN_SRC sh :tangle install.sh
install_fonts() {
    # download fonts
    for url in "${font_sources[@]}"; do
        wget -P ${HOME}/downloads/fonts $url
    done

    # unzip fonts
    cd ${HOME}/downloads/fonts
    unzip "*.zip"

    # create/check fonts directory
    fonts_dir="${HOME}/.local/share/fonts"
    if [ ! -d "${fonts_dir}" ]; then
        echo "mkdir -p $fonts_dir"
        mkdir -p "${fonts_dir}"
    else
        echo "Found fonts dir $fonts_dir"
    fi

    # find and copy fonts to font directory
    find ${HOME}/downloads/fonts/ -name '*.ttf' -exec cp {} "${fonts_dir}" \;
    find ${HOME}/downloads/fonts/ -name '*.otf' -exec cp {} "${fonts_dir}" \;

    # reload font cache
    fc-cache -f
}
#+END_SRC

** Git Repositories
#+BEGIN_SRC sh :tangle install.sh
install_git_repositories() {
    # clone git repositories
    cd ${HOME}/downloads
    for url in "${git_sources[@]}"; do
        git clone $url
    done
}
#+END_SRC

** Theme
#+BEGIN_SRC sh :tangle install.sh
install_theme() {
    # create/check theme directory
    themes_dir="${HOME}/.themes"
    if [ ! -d "${themes_dir}" ]; then
        echo "mkdir -p $themes_dir"
        mkdir -p "${themes_dir}"
    else
        echo "Found themes dir $themes_dir"
    fi

    # move and copy theme files to where they go
    mv ${HOME}/downloads/gtk $themes_dir/Dracula
}
#+END_SRC

** Chemacs2
#+BEGIN_SRC sh :tangle install.sh
install_chemacs() {
    [ -f ~/.emacs ] && mv ~/.emacs ~/.emacs.bak
    [ -d ~/.emacs.d ] && mv ~/.emacs.d ~/.emacs.bak
    git clone https://github.com/plexus/chemacs2.git ~/.emacs.d
}
#+END_SRC

** i3-gaps-deb
#+BEGIN_SRC sh :tangle install.sh
install_i3-gaps-deb() {
    cd $HOME/downloads/i3-gaps-deb
    /bin/bash i3-gaps-deb
}
#+END_SRC

** Dotfiles
I manage my dotfiles using a git --bare repository. This allows me to automatically install them where they belong when I clone them from GitHub.
For more information and how to setup your own, see my [[https://github.com/noncog/.dotfiles][dotfiles-repository]].
#+BEGIN_SRC sh :tangle install.sh
install_dotfiles() {
    # clone dotfiles
    git clone --bare https://github.com/noncog/.dotfiles $HOME/.dotfiles

    # checkout will backup dotfiles in the way
    cd ${HOME}
    mkdir -p .dotfiles-backup && \
    /usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME checkout 2>&1 | egrep "\s+\." | awk {'print $1'} | \
    xargs -I{} mv {} .dotfiles-backup/{}

    # now check out
    /usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME checkout

    # hide untracked files
    /usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME config --local status.showUntrackedFiles no
}
#+END_SRC

* Main Installer With Restart Ability
#+BEGIN_SRC sh :tangle install.sh
# define script - used to specify script to run after restart
script="bash $HOME/debian-autosetup/install.sh"

# check if reboot flag exists
if [ ! -f $HOME/resume-after-reboot ]; then
    # run your installer scripts for pre-reboot:
    install_debian_sources
    install_apt_packages

    # add flathub remote to flatpak before rebooting
    flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

    # prepare for reboot
    # add script to .bashrc or .zshrc to resume after reboot
    echo "$script" >> $HOME/.bashrc
    # create flag to signify if resuming from reboot
    sudo touch $HOME/resume-after-reboot
    # reboot
    sudo reboot
else
    # cleanup after reboot
    # remove the script from .bashrc or .zshrc
    sed -i '/^bash/d' $HOME/.bashrc
    # remove temp flag that signifies resuming from reboot
    sudo rm -f $HOME/resume-after-reboot

    # continue with installation post-resume:
    install_flatpak_packages
    install_directories
    install_fonts
    install_git_repositories
    install_theme
    install_chemacs
    install_i3-gaps-deb
    install_dotfiles
fi
#+END_SRC
